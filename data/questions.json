{
  "lists": [
    {"number": "1", "question": "Что выведет этот код?",
      "picture": "lists_1.png",
      "choose": [
        "fruits", "Банан", "2", "1"
      ],
      "correct": "Банан",
      "explanation": "Метод index позволяет найти индекс элемента в списке.\n\nНумерация элементов в списке начинается с нуля. Соответственно индекс элемента Банан – 1."
    },
    {"number": "2", "question": "Какая функция позволяет найти длину списка?",
      "picture": "python.png",
      "choose": [
        "len()", "long()", "length()", "langed()"
      ],
      "correct": "len()",
      "explanation": "Чтобы узнать длину списка, используйте функцию len. Например: \n> fruits = [\"Яблоко\", \"Банан\", \"Персик\"]\n, затем> len(fruits)\n3"
    },
    {"number": "3", "question": "Как добавить элемент 'apple' в список 'food'?",
      "picture": "lists_3.png",
      "choose": [
        "'apple'.append('food')", "'food'.append('apple')", "'apple'.join('food')", "'food'.join('apple')"
      ],
      "correct": "'food'.append('apple')",
      "explanation": ""
    },
    {"number": "4", "question": "Пустой список можно создать кодом:",
      "picture": "python.png",
      "choose": [
        "list = ()", "list = {}", "list = ''", "list = []"
      ],
      "correct": "list = []",
      "explanation": "Для списков используются квадратные скобки [].\n Круглые скобки () прмиеняются для кортежей,\n фигурные {} - для словарей,\n кавычки '' - для строк."
    },
    {"number": "5", "question": "Чтобы удалить элемент 'Вася' из списка, можно использовать...",
      "picture": "lists_5.png",
      "choose": [
        "delete.names('Вася')", "'Вася'.remove(names)", "del names([1])", "[0].delete('names')"
      ],
      "correct": "del names([1])",
      "explanation": "Элемент 'Вася' можно удалить двумя способами: \n del names([1]) (нумерация элементов списка начинается с нуля) или names.remove('Вася')"
    },
    {"number": "6", "question": "Как сделать список из строки?",
      "picture": "python.png",
      "choose": [
        "for symbol in str('Список'): add[list]", "'Список'.append(list)", "list('Список')", "str('Список').list(symbol)"
      ],
      "correct": "list('Список')",
      "explanation": "Получившийся список будет выглядеть так: ['с', 'п', 'и', 'с', 'о', 'к']"
    },
    {"number": "7", "question": "Что нужно ввести вместо <?>, чтобы получить ['колбаса', 'хлеб', 'яйца', 'бананы']?",
      "picture": "lists_7.png",
      "choose": [
        "list.insert(2, 'яйца')", "list.paste('яйца', 3)", "list.append(3, 'яйца')", "list.add('яйца', 2)"
      ],
      "correct": "list('Список')",
      "explanation": "list.insert(i, x) - вставляет на i-ый элемент значение x"
    },
    {"number": "8", "question": "Что нужно ввести вместо <?>, чтобы получить список с прежними элементами, но без 'хлеб'?",
      "picture": "lists_8.png",
      "choose": [
        "list.change('хлеб', 'яйца')", "list.reverse()", "ничего", "2=3"
      ],
      "correct": "list.reverse()",
      "explanation": "list.reverse() разворачивает список, а list.pop(i) удаляет i-ый элемент списка (нумерация элементов начинается с 0)"
    },
    {"number": "9", "question": "Что такое кортеж?",
      "picture": "python.png",
      "choose": [
        "список, который невозможно изменить", "список, который может содержать разные типы элементов", "список, полученный из словаря", "список, являющийся параметром функции"
      ],
      "correct": "список, который невозможно изменить",
      "explanation": ""
    },
    {"number": "10", "question": "Преобразовать список в кортеж можно с помощью...",
      "picture": "python.png",
      "choose": [
        "lin()", "car()", "pretl()", "tuple()"
      ],
      "correct": "tuple()",
      "explanation": ""
    }
  ],

  "strings": [
    {"number": "1", "question": "Что выведет этот код?",
      "picture": "strings_1.png",
      "choose": [
        "AaBb", "Aa Bb", "'Aa' + 'Bb'", "ошибка"
      ],
      "correct": "AaBb",
      "explanation": ""
    },
    {"number": "2", "question": "Что выведет этот код?",
      "picture": "strings_2.png",
      "choose": [
        "ab", "a b", "a/b", "a/b"
      ],
      "correct": "ab",
      "explanation": "Символ обратного слэша внутри многострочной строки отменяет перенос строки. Если бы не он, код вывел бы a и b на отдельных строках."
    },
    {"number": "3", "question": "Вы хотите заменить все двойные тире -- на символ дефиса — в переменной text. Чем заменить пропуск <...>?",
      "picture": "strings_3.png",
      "choose": [
        "replace", "change", "swap", "move"
      ],
      "correct": "replace",
      "explanation": "Итоговый вариант кода: text.replace('--', '—')"
    },
    {"number": "4", "question": "Что выведет этот код?",
      "picture": "strings_4.png",
      "choose": [
        "64", "bb", "88", "ошибка"
      ],
      "correct": "88",
      "explanation": "Вторая строчка сделает из переменной a строку - то же, что и b = '8'. Затем произойдёт умножение строки на 2"
    },
    {"number": "5", "question": "Что выведет этот код?",
      "picture": "strings_5.png",
      "choose": [
        "На столе лежит Банан", "На столе лежит {item}", "На столе лежит ", "ошибка"
      ],
      "correct": "На столе лежит {item}",
      "explanation": "Чтобы подставить переменную в строку, можно использовать f-строку. Чтобы вывести \"На столе лежит Банан\", нужно ввести: print(f'На столе лежит {item}')"
    },
    {"number": "6", "question": "Чем заменить пропуск <?>, чтобы код вывел 'llo'?",
      "picture": "strings_6.png",
      "choose": [
        "[4:3]", "[3:4]", "[:2]", "[2:]"
      ],
      "correct": "[2:]",
      "explanation": "Оператор извлечения среза - [X:Y], где X – начало среза (по умолчанию 0), а Y – окончание (по умолчанию равен длине строки). \n Cимвол с номером Y в срез не входит, нумерация начинается с 0."
    },
    {"number": "7", "question": "Чем заменить пропуск <?>, чтобы код вывел 'el'?",
      "picture": "strings_6.png",
      "choose": [
        "[:3]", "[2:4]", "[0:2]", "[1:3]"
      ],
      "correct": "[1:3]",
      "explanation": "Оператор извлечения среза - [X:Y], где X – начало среза (по умолчанию 0), а Y – окончание (по умолчанию равен длине строки). \n Cимвол с номером Y в срез не входит, нумерация начинается с 0."
    },
    {"number": "8", "question": "Что выведет этот код?",
      "picture": "strings_8.png",
      "choose": [
        "ошибка", "Привет, меня зовут % name %", "Привет, меня зовут Вася", "Привет, меня зовут"
      ],
      "correct": "Привет, меня зовут % name %",
      "explanation": "Чтобвы форматировать строку, нужно использовать: a = 'Привет, меня зовут {}'\n\nprint(a.format('Вася'))"
    },
    {"number": "9", "question": "Что выведет этот код?",
      "picture": "strings_9.png",
      "choose": [
        "ошибка", "Привет, меня зовут Вася", "-1", "None"
      ],
      "correct": "-1",
      "explanation": "Метод find находит в строке подстроку и возвращает её индекс (например, a.find('П')=0). Если подстрока не найдена, возвращается значение -1"
    },
    {"number": "10", "question": "Как подсчитать количество букв 'е' в строке?",
      "picture": "strings_9.png",
      "choose": [
        "a.count('е')", "number(a).'е'" , "a.quantity.'e'", "lot('e').a"
      ],
      "correct": "a.count('е')",
      "explanation": "Метод count подсчитывает количество вхождений одной строки в другую строку."
    }
  ],

  "dicts": [
    {"number": "1", "question": "Как получить из словаря фамилию Валеры?",
      "picture": "dicts_1.png",
      "choose": [
        "people('Валера')", "people(['Валера'])", "people({lastname})", "people([1])"
      ],
      "correct": "people(['Валера'])",
      "explanation": ""
    },
    {"number": "2", "question": "Как добавить новую пару элементов в словарь?",
      "picture": "python.png",
      "choose": [
        "people[\"Сергей\"] = \"Васильев\"", "people.append({\"Сергей\": \"Васильев\"})", "people[\"Сергей\" = \"Васильев\"]", "({\"Сергей\"}: {\"Васильев\"}),"
      ],
      "correct": "people[\"Сергей\"] = \"Васильев\"",
      "explanation": ""
    },
    {"number": "3", "question": "Как удалить пару элементов из словаря?",
      "picture": "dicts_1.png",
      "choose": [
        "people.remove(['Максим': 'Петров'])", "del people['Максим']", "del people['Максим': 'Петров'])", "people.remove(['Максим'])"
      ],
      "correct": "del people['Максим']",
      "explanation": ""
    },
    {"number": "4", "question": "Что выведет этот код?",
      "picture": "dicts_4.png",
      "choose": [
        "ошибка", "dict_keys(['Вася', 'Валера', 'Максим']['Сидоров', 'Петров', 'Иванов'])", "dict_keys(['Сидоров', 'Петров', 'Иванов'])", "dict_keys(['Вася', 'Валера', 'Максим'])"
      ],
      "correct": "dict_keys(['Вася', 'Валера', 'Максим'])",
      "explanation": "['Вася', 'Валера', 'Максим'] - ключи (keys) словаря, а ['Сидоров', 'Петров', 'Иванов'] - их значения (values)."
    },
    {"number": "5", "question": "Что выведет этот код?",
      "picture": "dicts_5.png",
      "choose": [
        "capitals_1 без изменений", "capitals_2 без изменений", "объединённый словарь capitals_1 и capitals_2", "ошибка"
      ],
      "correct": "capitals_2 без изменений",
      "explanation": "Метод update() добавляет к первому словарю второй. При этом второй остаётся без изменений"
    },
    {"number": "6", "question": "Что поставить вместо <?>, чтобы получить словарь?",
      "picture": "dicts_6.png",
      "choose": [
        "fromkeys", "forvalues", "into", "todict"
      ],
      "correct": "fromkeys",
      "explanation": "Результат: {'a': 'c', 'b': 'c'}"
    },
    {"number": "7", "question": "Что выведет этот код?",
      "picture": "dicts_7.png",
      "choose": [
        "dict_items([1, 3, 5])", "dict_items([2, 4, 6])", "dict_items([(1, 2), (3, 4), (5, 6)])", "123456"
      ],
      "correct": "dict_items([(1, 2), (3, 4), (5, 6)])",
      "explanation": "dict.items() возвращает пары (ключ, значение)."
    },
    {"number": "8", "question": "Что выведет этот код?",
      "picture": "dicts_8.png",
      "choose": [
        "13", "10", "17", "16"
      ],
      "correct": "16",
      "explanation": "a[1]=2, b[9]=10, a[3]=4"
    },
    {"number": "9", "question": "Что выведет этот код?",
      "picture": "dicts_8.png",
      "choose": [
        "13", "10", "17", "16"
      ],
      "correct": "16",
      "explanation": "a[1]=2, b[9]=10, a[3]=4"
    },
    {"number": "10", "question": "Что выведет этот код?",
      "picture": "dicts_10.png",
      "choose": [
        "1", "5", "6", "ошибка"
      ],
      "correct": "ошибка",
      "explanation": "Код пытается обратиться к ключу 2, но это значение."
    }
  ],
  "conditions": [
    {"number": "1", "question": "Что должно стоять на месте <?>, чтобы проверить значение переменной?",
      "picture": "conditions_1.png",
      "choose": [
        "=", "==", "===", ":"
      ],
      "correct": "==",
      "explanation": "= всегда задаёт значение переменной, а == сравнивает два значения."
    },
    {"number": "2", "question": "Выражение, которое идёт внутри if, называется...",
      "picture": "python.png",
      "choose": [
        "условие", "следствие", "предикат", "ступень"
      ],
      "correct": "предикат",
      "explanation": "Предикат — это такая информация, которая может оказаться правдивой или ложной."
    },
    {"number": "3", "question": "Сколько раз после одного if может повторяться elif?",
      "picture": "python.png",
      "choose": [
        "1", "8", "64", "неограничено"
      ],
      "correct": "неограничено",
      "explanation": "elif позволяет проверить условие, если условие из предыдущего if ложно."
    },
    {"number": "4", "question": "",
      "picture": "conditions_1.png",
      "choose": [
        "", "", "", ""
      ],
      "correct": "",
      "explanation": ""
    },
    {"number": "5", "question": "Оператор != означает...",
      "picture": "conditions_1.png",
      "choose": [
        "строгое равенство", "более или равно", "неравенство", "менее или равно"
      ],
      "correct": "неравенство",
      "explanation": ""
    },
    {"number": "6", "question": "Как выполнить код в цикле 10 раз?",
      "picture": "python.png",
      "choose": [
        "while (0-10):", "cycle.range(10):", "for i in range(10)", "def function.repeat(10)"
      ],
      "correct": "for i in range(10)",
      "explanation": "for i in range(10) повторит код для каждого элемента из образованного списка [0, 1, 2, ..., 9)"
    },
    {
      "number": "7",
      "question": "Что выведет этот код?",
      "picture": "conditions_7.png",
      "choose": [
        "ошибка",
        "i",
        "Привет",
        "Привет Привет Привет"
      ],
      "correct": "привет привет привет",
      "explanation": "Код выполнится для каждого символа строки Hi!, то есть 3 раза"
    },
    {
      "number": "8",
      "question": "Что делает break?",
      "picture": "python.png",
      "choose": [
        "останавливает цикл",
        "добавляет +1 повторение цикла",
        "разрывает цикл на две части, выполняющиеся одновременно",
        "отменяет результат повторения при определённых условиях"
      ],
      "correct": "останавливает цикл",
      "explanation": ""
    },
    {
      "number": "9",
      "question": "Что выведет этот код, если a=6, b=4",
      "picture": "conditions_9.png",
      "choose": [
        "Колбаса",
        "Сосиска",
        "Ветчина",
        "ничего"
      ],
      "correct": "Сосиска",
      "explanation": ""
    },
    {
      "number": "10",
      "question": "Что выведет этот код?",
      "picture": "conditions_10.png",
      "choose": [
        "Колбаса Колбаса Колбаса",
        "Сосиска Сосиска Сосиска",
        "Сосиска",
        "Колбаса"
      ],
      "correct": "Колбаса Колбаса Колбаса",
      "explanation": "Строчка 5 преобразует трёхзначное число a+b в строчку из трёх символов, для каждого из которых выпролняется цикл"
    }
  ]
}